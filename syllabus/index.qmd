---
title: "Syllabus"
toc: true
toc-depth: 5
page-layout: full
---

## Computer Science 104 Fall 2025 

### Course Instructor

- **Instructor Name**: Dr. Gregory M. Kapfhammer
- **Office Location**: Alden Hall 108

Please visit the instructor's [web site](https://www.gregorykapfhammer.com/)
for more information!

### Instructor Appointments

- **Monday**: 11:00 AM -- 12:00 noon
- **Tuesday**: 4:00 PM -- 5:00 PM
- **Wednesday**: 4:00 PM -- 5:00 PM
- **Thursday**: 11:00 AM -- 12:00 noon
- **Thursday**: 2:30 AM -- 4:00 PM
- **Friday**: 11:00 AM -- 12:00 noon
- **Friday**: 3:00 PM -- 4:00 PM

All instructor appointments are 15-minute time slots and take place in Alden Hall,
Room 108.

::: {.callout-note appearance="minimal" title="Scheduling Appointments"}

To schedule a meeting with the course instructor during office hours, please
visit the [Instructor's Appointment
Scheduler](https://www.gregorykapfhammer.com/schedule/). You can schedule an
appointment by clicking a suitable box in Google Calendar's Appointment
Scheduler and then reserving an open time slot. The details about your chosen
appointment will appear in both your Google Calendar and the instructor's Google
Calendar. Please arrive ten minutes in advance for your meeting with an agenda,
a list of discussion topics, and a description of the steps that you have
already taken to address the topics on the agenda. Please also be aware that, by
necessity, the meeting before yours may run late.

:::

### Course Description

An introduction to creation of effective documents and documentation using
industry-standard approaches to creating and treating “documentation as code.”
Participating in project-based and hands-on activities, students create
purpose-driven digital writing with special attention to forms, formats, and
conventions expected of contemporary technical communication. Students also gain
experience with creating collaborative and ethically-consistent content working
in a team-based setting. During a weekly laboratory session students employ
contemporary software tools to complete technical documentation projects,
reporting on their results through both written reflections and oral
presentations. Students are invited to use their own departmentally approved
laptop in this course; a limited number of laptops are available for use during
class and lab sessions. 

- **Prerequisite**: None
- **Distribution Requirements**: HE, SP

::: {.callout-note appearance="minimal" title="Explaining the Distribution Requirements" collapse="false"}

- **Quantitative Reasoning (HE)**: The study of Human Experience explores human
physical, mental, emotional, and/or spiritual experiences as conveyed in texts
broadly defined. Through engagement with such texts, students develop an
appreciation for human experiences and their representations.

- **Learning Outcome**: Students who successfully complete this requirement will
demonstrate an understanding of how to interpret human experiences as conveyed
in texts (including works of visual and performance art, rituals, cultural
artifacts and traditions, and/or the written and spoken word).

- **Scientific Process and Knowledge (SP)**: Courses involving Scientific
Process and Knowledge aim to convey an understanding of what is known or can be
known about the natural world; apply scientific reasoning towards the analysis
and synthesis of scientific information; and create scientifically literate
citizens who can engage productively in problem solving.

- **Learning Outcome**: Students who successfully complete this requirement will
demonstrate an understanding of the nature, approaches, and domain of scientific
inquiry.

Please refer to the [description of the learning outcomes for the distribution
requirements](https://sites.allegheny.edu/registrar/academic-policies/graduation-requirements/distribution-requirement/distribution-requirements-learning-outcomes/)
to learn more about how they play a central role in the educational experience
at Allegheny College.

:::

### Learning Objectives

Allegheny College’s educational program is designed so that its graduates are able to:

- **AC-1**: Think critically and creatively.

- **AC-2**: Communicate clearly and persuasively as speakers and writers.

- **AC-3**: Invoke multiple ways of understanding to organize and evaluate
evidence, and to interpret and make sense of their experiences and the
experiences of others.

- **AC-4**: Apply their knowledge and learning to engage in informed debate,
and to analyze and solve problems.

Computer Science 104 is a course taken by all Software Engineering majors and
often taken by many students who major or minor in Computer Science, Data
Science, or Informatics. Graduates with the Software Engineering major --- who
all take the Computer Science 104 course --- must demonstrate their attainment
of these learning objectives:

- **SE-1**: While working in a team, can effectively design, implement,
evaluate, improve, and document a solution to a problem delivered as a
maintainable software system.
- **SE-2**: Demonstrates competency in the theories, models, and practices of
project domains that require the engineering of software.
- **SE-3**: Can effectively manage and predict the cost, scope, and deadline of
a software engineering project.
- **SE-4**: Uses effective oral and written communication methods to explain
both the technical and product-use details of a software artifact.

The specific learning objectives for Computer Science 104 are as follows:

- **CS-104-1**: Describe and explain processes such as software installation or
design for a variety of technical and non-technical audiences ranging from
inexperienced to expert.
- **CS-104-2**: Use professional-grade integrated development environments (IDEs),
command-line tools, and version control systems to compose, edit, and deploy
well-structured, web-ready documents and industry-standard documentation tools.
- **CS-104-3**: Build automated publishing pipelines to format, check, and ensure both the
uniformity and quality of digital documents.
- **CS-104-4**: Identify and apply appropriate conventions of a variety of technical
communities, tools, and computer languages to produce industry-consistent
diagrams, summaries, and descriptions of technical topics or processes.

The learning objectives for Computer Science 104 enable the attainment of both
the Software Engineering program learning objectives that in turn support the
attainment of the College's learning objectives. Throughout this course, the
instructor will reference these learning objectives, connect them to the course
activities, and invite students to reflect on their attainment of them. In
addition to administering an assessment of learning objective attainment through
the final examination, the course instructor will ask students to complete a
self assessment of their attainment of these learning objectives.

### Course Policies

#### Assessment

The grade that a student receives in this class will be based on the following
categories. All of these percentages are approximate and, if the need to do so
presents itself, the course instructor may, for instance, change the assigned
percentages during the academic semester.


| Category                                 | Percentage |
|-------------------------------------------|------------|
| Class Participation                       |    10%     |
| Final Executable Examination              |    10%     |
| Document Engineering Skill-Checks         |    10%     |
| Document Engineering Knowledge-Checks     |    10%     |
| Document Engineering Presentations        |    30%     |
| Document Engineering Tool-Building Projects|    30%     |


These assessment categories have the following definitions:

- **Class Participation**: Students are expected to regularly attend and
actively participate in all of the class and laboratory sessions, as outlined
on the [course schedule](../schedule/index.qmd). After either an unexcused
absence or a late attendance to either a class or a laboratory session, a
student's weekly class participation grade will be reduced. Students who need
to miss class or attend class late for an excused reason should communicate
their situation to the course instructor in a timely fashion. A student's
weekly class participation grade will be reduced if they are frequently
observed, during either class or laboratory sessions, undertaking
non-course-related activities like viewing email, social media, or other
content not about algorithm analysis. 


- **Final Executable Examination**: The final examination is an online,
executable, cumulative assessment covering all of the material during all of the
course sessions, as outlined on the [course schedule](../schedule/index.qmd).
Unless prior arrangements are made with the instructor, all students should use
their computer to take the final examination on the scheduled date and to
complete it in the stated location while taking no more than the required amount
of time. The cumulative final is an executable examination that a student will
complete through the use of GitHub, VS Code, and the Python programming tools
installed on their laptops. Students may use external sources, including
artificial intelligence coding assistants, during the completion of the final
examination provided that they cite these sources and explain how they used them
to complete the final examination.

- **Document Engineering Skill-Checks**: Completing during a Friday classroom
session, these skill-checks are online, cumulative assessments covering all
prior technical material from the prior course sessions, as outlined on the
[course schedule](../schedule/index.qmd). Unless prior arrangements are made
with the instructor, all students should use their computer to take these
skill-checks on the scheduled date and to complete it in the stated location
while taking no more than the required amount of time. Designed to prepare
learners for the final executable examination, each skill-check is an executable
assessment that students complete through the use of GitHub, VS Code, and the
Python programming tools on their laptops. Students may use external sources,
including artificial intelligence coding assistants, during the completion of a
skill-check provided that they cite these sources and explain how they used them
to complete the examination.

::: {.callout-note appearance="minimal" title="Additional Assessment Details" collapse="false"}

- **Class Participation**: three total reports available at conclusion of the
three course modules.

- **Final Executable Examination**: grade automatically reported at end of
examination period.

:::

## Course Schedule

### Module Overview

- **Module One**: 
  - **Topic**: Document Engineering Foundations
  - **Weeks**: One through six
  - **Review Subjects**: [uv](https://docs.astral.sh/uv/) and
  [Quarto](https://quarto.org/)
  - **Technical Topics**: 
    - **Documentation**: Diataxis, README-driven development
    - **Engineering**: Python fundamentals, Version control, Quarto
- **Module Two**:
  - **Topic**: Document Engineering Building Blocks
  - **Weeks**: Seven through eleven
  - **Subjects**: [ruff](https://astral.sh/ruff) and
  [Quarto](https://quarto.org/)
  - **Technical Topics**: 
    - **Documentation**: Zettelkasten, Digital gardens
    - **Engineering**: Intermediate Python programming, AI coding agents, Quarto
- **Module Three**:
  - **Topic**: Advanced Document Engineering
  - **Subjects**: [ty](https://astral.sh/ruff) or
  [Pyrefly](https://pyrefly.org/) and [Quarto](https://quarto.org/)
  - **Weeks**: Twelve through sixteen
  - **Topics**: 
    - **Documentation**: Literate programming, Localization
    - **Engineering**: Advanced Python programming, Context engineering, Quarto

### Schedule Details

#### Week-by-Week Highlights

- **Basics**:
  - **Start Semester**: Week One
  - **Fall Break**: Week Seven 
  - **Mid-Term Grades Submission**: Week Nine
  - **All-College Programming**: Week Eleven 
  - **Thanksgiving Break**: Week Fourteen
  - **End Semester**: Week Sixteen
- **Examinations**:
  - **Midterm Exam One**: Week Seven
  - **Midterm Exam Two**: Week Twelve
  - **Final Exam**: Week Sixteen
- **Document Engineering Skill-Checks**:
  - **Skill-Check One**: Week Two
  - **Skill-Check Two**: Week Three
- **Document Engineering Skill-Checks**:
  - **Skill-Check One**: Week Two
  - **Skill-Check Two**: Week Three


#### Important Dates

- **Midterm Executable Examination One**
    - **Date**: February 28, 2025
    - **Time**: 2:30 -- 4:00 PM
    - **Location**: Alden 109
- **Midterm Executable Examination Two**
    - **Date**: April 4, 2025
    - **Time**: 2:30 -- 4:00 PM
    - **Location**: Alden 109
- **Final Executable Examination**
    - **Examination Code**: D
    - **Date**: May 2, 2025
    - **Time**: 9:00 AM -- 12:00 Noon
    - **Location**: Alden 109

### Weekly Cadence

- {{< iconify fa6-solid people-line size=18px >}} **Monday**:
Instructor-led document engineering deep-dive
  - Introduction to scientific, technical, and engineering topics:
    - Data structures and algorithms
    - Performance evaluation techniques
    - Software engineering best practices
    - Prepare for these projects:
      - Algorithm engineering project
      - Algorithm all-hands project
    - Prepare for these assessments:
      - Midterm examination
      - Final examination
      - Skill-checks
- {{< iconify game-icons team-idea size=18px >}} **Thursday and Friday**:
Algorithm All-Hands Projects
    - **Cadence**: Two weeks devoted to **phase one**, two weeks for **phase
    two**, and finally one week for **phase three**. Complete these tasks during
    the second halves of Thursday's classroom session and Friday's laboratory
    session.
    - {{< iconify fa6-solid users-gear size=18px >}} **Phase One**: Building on
    the course's prior scientific and engineering content, prepare a research
    question and design an experiment to answer it
        - **Goal**: *Scientific study in algorithmology*
          - Propose research question connect to current module
          - Specify evaluation metrics used to answer research question
          - Design an experiment to measure evaluation metrics
          - Assign tasks for the remaining phases of the project
    - {{< iconify fa6-solid users-gear size=18px >}} **Phase Two**: Leveraging
    prior work, implement all needed software tools and apply them when
    conducting the experiment designed in the prior phase
        - **Goal**: *Engineering effort in algorithmology*
          - Identify useful function(s) for refinement
          - Explain steps for improving the function(s)
          - Create a pull request and follow it through review
          - Give an overview of the completed function(s)
          - Give a demonstration of a command-line tool using the function(s)
    - {{< iconify fa6-solid users-gear size=18px >}} **Phase Three**: Leveraging
    prior work, answer the research question
        - **Goal**: *Effective communication in algorithmology*
          - Analyze and interpret the results
          - Create a web-based report to present and discuss the results
          - Collaboratively publish the report to the course web site
          - Present the report and participate in a discussion session
          - Provide thorough answer(s) to the chosen research question

- {{< iconify fa6-solid diagram-project size=18px >}} **Friday**: Algorithm
Engineering Project
  - {{< iconify fa6-solid gear size=18px >}} **Week One**: Design, implement,
  test, and document software tools
      - Data structure(s) and algorithm(s)
      - Benchmark evaluation framework
      - Data analysis and visualization tools
  - {{< iconify fa6-solid gear size=18px >}} **Week Two**: Design, conduct, and
  report on an experiment
    - Demonstrate implementation of completed system
    - Document the experimental design
    - Pose research question(s)
    - Define evaluation metrics
    - Conduct the experiment
    - Analyze and interpret the results
    - Draw conclusions and make recommendations

- {{< iconify fa6-solid diagram-project size=18px >}} **Friday**: Skill-Checks
and Executable Examinations
  - {{< iconify fa6-solid gear size=18px >}} **Skill-Check**: Completed during
  the last 45-minutes of the laboratory session
  - {{< iconify fa6-solid gear size=18px >}} **Examination**: Completed during
  the entire laboratory session

#### Assessment Policies

Unless exempted by the instructor, students must abide by the following
assessment policies:

##### Assignment Submission

All assignments will have a stated due date shared through GitHub, GitHub
Classroom, and/or the [Algorithmology Discord](https://discord.gg/YHjhQaBnme).
No credit will be awarded for any course work that you submit to the incorrect
GitHub repository or web site. Unless special advance arrangements are made
with the instructor to address extenuating circumstances, no work will be
accepted after the deadline.

##### Assignment Evaluation

Using a report that the instructor shares with you through your GitHub
repositories devoted to work in the field of algorithm analysis, you will
privately receive a grade for and feedback on your course projects. Your grade
will be a function of whether or not you (a) completed work that fulfills the
project's specification and (b) submitted it by the deadline to the stated
platform.

##### Algorithmology Tokens

Students may "spend" up to three algorithmology "tokens" that they may use to
secure seven days of additional time to complete a project. You can either
preemptively spend a token after missing a deadline for an assignment or,
alternatively, spend the token to improve a project after receiving its
assessment. For instance, a student may choose to spend a token by asking the
instructor to reevaluate one of the algorithm engineering projects. With the
exception of the final examination, students may also spend a token to re-take
a skill-check or an executable examination. Students are encouraged to pay a
token for the re-take of a skill-check or an executable examination no more
than 48 hours after the completion of the original assessment. Outside of using
these three tokens or severe, extenuating, and unexpected circumstances that
are well documented, the instructor will not grant any requests for extensions
or re-reassessment.

##### Course Attendance

It is mandatory for all students to attend every one of the course sessions. If,
due to extenuating circumstances, you will not be able to attend a session,
then, whenever possible, please communicate with the instructor at least one
week in advance to describe your situation. Students who have any signs of
illness should not attend any in-person course sessions.

##### Class Preparation

In order to minimize confusion and maximize learning, students must invest time
to prepare for the class sessions that focus on professional development,
technical development, and project development. Although the course instructor
and the student technical leaders will always be available to serve as guide
for individual students, teams of students, and the entire class, it is
expected that students will volunteer to lead and actively contribute to all
class sessions. Only those students who have prepared for class by reading and
running the assigned material will be able to effectively participate in these
class discussions. To help students remain organized and to effectively prepare
for classes, the instructor will maintain a list of [course
slides](../slides/index.qmd) and a [course schedule](../schedule/index.qmd)
with reading assignments, programming suggestions, and other important
information about the course (e.g., references to the algorithm engineering
projects).

#### Seeking Assistance

Students who are struggling to understand the knowledge and skills developed in
this course are encouraged to seek assistance from the course instructor and/or
the student technical leaders. Students should, within the bounds of the Honor
Code, ask and answer questions on the [Algorithmology Discord
Server](https://discord.gg/YHjhQaBnme); please request assistance from the
instructor and student technical leaders first through public Discord channels
before sending an email or a direct message. Students who need more assistance
are invited to schedule a meeting through the [instructor's appointment
scheduler](https://www.gregorykapfhammer.com/schedule/) and come to the meeting
with details about their question. Students can see the office hour schedule
for student technical leaders by viewing the list of [student technical
leaders](https://www.cis.allegheny.edu/teaching/technicalleaders/) and by
monitoring announcements in the [Allegheny College Computer Science Discord
Server](https://discord.gg/CS2h9kXzX6).

#### Using GitHub and Discord

This course will primarily use GitHub and Discord for all course communication.
We will use GitHub for the sharing of both source code and documentation for
course projects and for reporting issues in those materials. We will use two
distinct Discord servers for all course discussions. The [Algorithmology
Discord Server](https://discord.gg/YHjhQaBnme) provides a way for members of
the developer development community to use text and video to chat with each
other and will be the main forum for discussing the professional and technical
content in the field of algorithm analysis. The [Allegheny College Computer
Science Discord Server](https://discord.gg/CS2h9kXzX6) will be the main forum
for Department of Computer Science announcements. Finally, any content that a
student wants the instructor to assess (e.g., the work for an algorithm
engineering project) must be in a GitHub repository.

#### Using Email

Although we will primarily use the [Algorithmology Discord
Server](https://discord.gg/YHjhQaBnme) for class communication, the course
instructor will sometimes use email to send announcements about important
matters such as changes in the schedule. It is your responsibility to check your
email at least once a day and to ensure that you can reliably send and receive
emails. This class policy is based on the statement about the use of email that
appears in *The Compass*, the College's student handbook; please see the course
instructor if you do not have this handbook.

#### Honor Code

The Allegheny College Academic bulletin describes The Academic Honor Program
that governs the entire academic program at Allegheny College. The Honor Program
applies to all work that is submitted for academic credit or to meet non-credit
requirements for graduation at Allegheny College. This includes all work
assigned for this class (e.g., executable examinations and course assignments).
All students who have enrolled in the College will work under the Honor Program.
Each student who matriculates at the College acknowledges this Honor Code
pledge:

> I hereby recognize and pledge to fulfill my responsibilities, as
> defined in the Honor Code, and to maintain the integrity of both
> myself and the College community as a whole.

#### Effective Algorithm Engineering

Students who create the source code and documentation for their algorithm
engineering and algorithm all-hands projects should ensure the implementation of
a high-quality final product. While students are permitted to use a wide variety
of algorithm engineering tools, such as integrated development environments,
testing frameworks, automated debuggers, and code generators (e.g., systems that
leverage large language models like GitHub Copilot) and documentation sites such
as StackOverflow, they must take responsibility for all of the source code and
documentation that they submit for this course, including artifacts that are
automatically generated by a software tool.

This means that every student must work as an effective algorithm engineer by
documenting the sources for their work and verifying the correctness,
maintainability, and long-term reliability of all source code and documentation
that they submit. As such, students who use software tools to create content are
responsible for citing their sources and demonstrating their understanding of it
as a part of any follow-on assessment. Moreover, all students in the class are
responsible for all of the source code and documentation submitted to the GitHub
repository that hosts the course projects, including any tool-generated software
artifacts. This means that every student should be able to answer questions,
during either an in-person or online discussion, about any algorithm engineering
content, including that which was automatically generated by a software tool.

Students who are effective algorithm engineers also pledge to abide by the [ACM
Code of Ethics and Professional Conduct](https://www.acm.org/code-of-ethics).
Unless the students in this course furnish a different governing contract, they
also pledge to follow the principles espoused by exemplary technical
organizations, such as [Oxide Computer](https://oxide.computer/) and its public
statement of [mission and principles](https://oxide.computer/principles).

#### Disability Services

Students with disabilities who believe they may need accommodations in this
class are encouraged to contact Student Accessibility and Support Services
(SASS) at 814-332-2898 or `studentaccessibility@allegheny.edu`. SASS is located
in the Center for Student Success in Pelletier Library. Please contact SASS as
soon as possible to ensure that approved accommodations are implemented in a
timely fashion.

### Welcome Message

In reference to software, Frederick P. Brooks, Jr. wrote in chapter one of *The
Mythical Man Month* that "the magic of myth and legend has come true in our
time." Software is a pervasive aspect of our society that changes how we think
and act. High quality and efficient software also has the potential to
positively influence the lives of many people. Let's embark on this journey of
discovery and innovation, harnessing the power of algorithms to efficiently
solve complex problems with software. At the start of this class, I invite you
to join together in an adventure in algorithm analysis!

::: {.callout-note appearance="minimal" title="External Learners"}

This syllabus is for learners who enrolled in a for-credit Algorithm Analysis
course in the [Department of Computer and information
Science](https://www.cis.allegheny.edu/) at [Allegheny
College](https://www.allegheny.edu/). Even though external learners are not
bound by this syllabus, they can rely on the
[Algorithmology](https://github.com/TeamDevDev/www.developerdevelopment.com/graphs/contributors)
team and the members of the [Algorithmology
Discord](https://discord.gg/phSQfB8bZx).

:::
