---
title: "Advanced Quarto for Documentation"
description: "Explore advanced features of Quarto"
date: "2025-09-29"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Prosegrammers"
---

# Document engineering

::: {.fragment style="margin-top: -0.5em; font-size: 0.80em;"} 

- {{< iconify fa6-solid lightbulb >}} **What is document engineering?**
    - Creating documents using code
    - Manipulating and analyzing text data
    - Building documentation systems
    - "Prosegrammers" combine *prose* and *programming*

:::

::: {.fragment style="margin-top: -0.5em; font-size: 0.80em;"}

- {{< iconify fa6-solid lightbulb >}} **Why is it important?**
    - Documentation quality affects software success
        - Poor docs cause user confusion
        - Clear docs increase adoption
        - Automated docs reduce maintenance cost

:::

# Extended features of Markdown and Quarto

::: fragment

- Links and images
- Code blocks and inline code
- Executable code blocks with Quarto
- Live output from code execution
- Tables for structured data
- Blockquotes for emphasis

:::

## Links can connect your content

{{< iconify fa6-solid link >}} **Source Code for creating links**

```markdown
**External Link:**
Visit [GitHub](https://github.com) for version control.

**Internal Link:**
See the [syllabus](../../syllabus/index.qmd) for details.

**Reference Link:**
Check out [Python documentation][python-docs].

[python-docs]: https://docs.python.org/3/
```

**Rendered Output:**

**External Link:**
Visit [GitHub](https://github.com) for version control.

**Internal Link:**  
See the [syllabus](../../syllabus/index.qmd) for details.

## Images offer visual enhancement

{{< iconify fa6-solid image >}} **Source Code example for images**

```markdown
**Basic Image:**
![Prosegrammers Logo](../../images/Prosegrammers-Logo.svg)
```

![Prosegrammers Logo](../../images/Prosegrammers-Logo.svg)

## {{< iconify fa6-solid code >}} Code Blocks: Show Technical Content

**Source Code:**
````markdown
**Inline Code:**
Use the `print()` function in Python.

**Fenced Code Block:**
```python
def greet_prosegrammer(name: str) -> str:
    """Greet a document engineer professionally."""
    return f"Hello, {name}! Ready to engineer some documents?"

print(greet_prosegrammer("Alice"))
```
````

## {{< iconify fa6-solid code >}} Code Blocks: Rendered Output

**Inline Code:**
Use the `print()` function in Python.

**Fenced Code Block:**
```python
def greet_prosegrammer(name: str) -> str:
    """Greet a document engineer professionally."""
    return f"Hello, {name}! Ready to engineer some documents?"

print(greet_prosegrammer("Alice"))
```

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Code blocks preserve **formatting** and enable **syntax highlighting**
:::

## {{< iconify fa6-solid table >}} Tables: Structure Data

**Source Code:**
```markdown
| Tool | Purpose | Prosegrammer Use |
|------|---------|------------------|
| Git | Version control | Track document changes |
| Python | Programming | Automate documentation |
| Quarto | Publishing | Create professional docs |
| Markdown | Markup | Write readable content |
```

## {{< iconify fa6-solid table >}} Tables: Rendered Output

| Tool | Purpose | Prosegrammer Use |
|------|---------|------------------|
| Git | Version control | Track document changes |
| Python | Programming | Automate documentation |
| Quarto | Publishing | Create professional docs |
| Markdown | Markup | Write readable content |

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Tables organize **structured data** in documentation and reports
:::

## {{< iconify fa6-solid quote-left >}} Blockquotes: Emphasize Key Ideas

**Source Code:**
```markdown
> Document engineering is the art of creating clear, 
> maintainable, and professional documentation that 
> serves both human readers and automated systems.
>
> — A thoughtful prosegrammer
```

**Rendered Output:**
> Document engineering is the art of creating clear, 
> maintainable, and professional documentation that 
> serves both human readers and automated systems.
>
> — A thoughtful prosegrammer

## {{< iconify fa6-solid minus >}} Horizontal Rules: Visual Separation

**Source Code:**
```markdown
First section content here.

---

Second section content here.

***

Third section content here.
```

**Rendered Output:**

First section content here.

---

Second section content here.

***

Third section content here.

## {{< iconify fa6-solid square-root-alt >}} Mathematical Expressions

**Source Code:**
```markdown
**Inline Math:**
The complexity is $O(n^2)$ for this algorithm.

**Display Math:**
$$
\text{Document Quality} = \frac{\text{Clarity} \times \text{Accuracy}}{\text{Complexity}}
$$
```

**Rendered Output:**

**Inline Math:**
The complexity is $O(n^2)$ for this algorithm.

**Display Math:**
$$
\text{Document Quality} = \frac{\text{Clarity} \times \text{Accuracy}}{\text{Complexity}}
$$

## {{< iconify fa6-solid magic >}} Quarto: Enhanced Markdown

::: {.incremental}
- **Executable code blocks** with live output
- **Cross-references** for figures and tables  
- **Citations and bibliography** management
- **Multiple output formats** from single source
:::

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Quarto transforms Markdown into a **powerful publishing platform**
:::

## {{< iconify fa6-solid play >}} Executable Python Code

```{pyodide}
#| autorun: true
#| max-lines: 10
def document_stats(text: str) -> dict:
    """Calculate basic statistics for document engineering."""
    words = text.split()
    return {
        "word_count": len(words),
        "character_count": len(text),
        "avg_word_length": sum(len(word) for word in words) / len(words)
    }

sample_text = "Prosegrammers excel at document engineering"
stats = document_stats(sample_text)
print(f"Document statistics: {stats}")
```

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Live code execution makes documentation **interactive** and **testable**
:::

