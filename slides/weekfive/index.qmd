---
title: "Markdown and Quarto Basics for Document Engineering"
description: "Essential markup skills for document engineering"
date: "2025-09-22"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Prosegrammers"
---

# Hey, the course website uses both Markdown and Quarto! Neato!

::: fragment

- Markdown and Quarto create professional documentation
- Learn the basics of Markdown's syntax and Quarto's features
- Support the creation of your own documentation projects

:::

## What is Markdown? How can document engineers use it? How does Quarto leverage Markdown?

::: {.incremental}

- Master fundamental **Markdown syntax** for documents
- Adopt **Quarto features** to enhance technical documentation
- Connect markup skills to **document engineering workflows**
- Create professional documentation as a **prosegrammer**
- Build on existing tools like **VS Code**, **Git**, and **Python**
- {{< iconify fa6-solid lightbulb >}} **Let's explore the essentials of
Markdown and Quarto!**

:::

## Understanding static site generators

::: {.fragment .fade style="margin-top: -0.5em; font-size: 0.9em;"}

- Static site generators convert input files into static websites:
    - **Examples**: Jekyll, Hugo, Quarto, and many more!
    - **Input**: Markdown, HTML, CSS, and other files
    - **Output**: Static HTML files for deployment
    - **Deployment**: Hosted on GitHub Pages or Netlify
    - Use templates and themes for consistent styling
    - Ideal for blogs, documentation, and portfolios
- {{< iconify fa6-solid lightbulb >}} **Prosegrammers** leverage static site
generators for efficient documentation workflows! You could use Quarto to
publish a website for your own document engineering tool! Impressive!

:::

## What is Markdown?

::: {.incremental style="margin-top: -0.1em; font-size: 0.8em;"}

- **Lightweight markup language** for formatting plain text
- Converts to HTML, PDF, and other formats seamlessly
- **Standard for technical documentation** across platforms
- Challenges associated with using Markdown:
    - Requires use of document engineering tools
    - Limited styling options compared to full HTML/CSS
    - Variations in Markdown flavors (e.g., GitHub, CommonMark)
    - Requires learning syntax for different elements
    - Managing large documents can be challenging
- Using Markdown is essential for **prosegrammers** in modern workflows

:::

# Basic Markdown Syntax

::: fragment

- Headers
- Paragraphs and line breaks
- Bold and italic text
- Ordered and unordered lists

:::

##  Headers: Structure Your Content

{{< iconify fa6-solid heading >}} **Source code examples for headers**

```markdown
# Main Title (H1)
## Section Header (H2) 
### Subsection Header (H3)
#### Detail Header (H4)
```


::: {.fragment .fade style="font-size: 1.0em;"}

- Headers create logical document hierarchy for navigation
- Use `H1` for main title, `H2` for sections, `H3` for subsections
- Use the `#` symbol to indicate a header's nesting levels
- Normally, define two or three levels of headers for clarity
- Consider building a table of contents for longer documents

:::

## {{< iconify fa6-solid paragraph >}} Paragraphs and Text Formatting

**Source Code:**
```markdown
This is a regular paragraph with normal text.

This is **bold text** and this is *italic text*.
You can combine them: ***bold and italic***.

Use `inline code` for technical terms.
```

**Rendered Output:**

This is a regular paragraph with normal text.

This is **bold text** and this is *italic text*.
You can combine them: ***bold and italic***.

Use `inline code` for technical terms.

## {{< iconify fa6-solid list >}} Lists: Organize Information

**Source Code:**
```markdown
**Unordered List:**
- Document engineering principles
- Python programming skills  
- Version control with Git
- Professional documentation

**Ordered List:**
1. Plan your document structure
2. Write clear, concise content
3. Format with Markdown
4. Review and revise
```

## {{< iconify fa6-solid list >}} Lists: Rendered Output

**Unordered List:**
- Document engineering principles
- Python programming skills  
- Version control with Git
- Professional documentation

**Ordered List:**
1. Plan your document structure
2. Write clear, concise content
3. Format with Markdown
4. Review and revise

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Lists help **organize complex information** in digestible chunks
:::

# Extended Features

::: fragment

- Links and images
- Code blocks and inline code
- Executable code blocks with Quarto
- Live output from code execution
- Tables for structured data
- Blockquotes for emphasis

:::

## {{< iconify fa6-solid link >}} Links: Connect Your Content

**Source Code:**
```markdown
**External Link:**
Visit [GitHub](https://github.com) for version control.

**Internal Link:**
See the [syllabus](../../syllabus/index.qmd) for details.

**Reference Link:**
Check out [Python documentation][python-docs].

[python-docs]: https://docs.python.org/3/
```

**Rendered Output:**

**External Link:**
Visit [GitHub](https://github.com) for version control.

**Internal Link:**  
See the [syllabus](../../syllabus/index.qmd) for details.

## {{< iconify fa6-solid image >}} Images: Visual Enhancement

**Source Code:**
```markdown
**Basic Image:**
![Prosegrammers Logo](../../images/Prosegrammers-Logo.svg)

**Image with Alt Text:**
![Document engineering workflow diagram](workflow.png)

**Image with Link:**
[![GitHub](github-logo.png)](https://github.com)
```

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Alt text makes images **accessible** and improves **SEO** for documentation
:::

## {{< iconify fa6-solid code >}} Code Blocks: Show Technical Content

**Source Code:**
````markdown
**Inline Code:**
Use the `print()` function in Python.

**Fenced Code Block:**
```python
def greet_prosegrammer(name: str) -> str:
    """Greet a document engineer professionally."""
    return f"Hello, {name}! Ready to engineer some documents?"

print(greet_prosegrammer("Alice"))
```
````

## {{< iconify fa6-solid code >}} Code Blocks: Rendered Output

**Inline Code:**
Use the `print()` function in Python.

**Fenced Code Block:**
```python
def greet_prosegrammer(name: str) -> str:
    """Greet a document engineer professionally."""
    return f"Hello, {name}! Ready to engineer some documents?"

print(greet_prosegrammer("Alice"))
```

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Code blocks preserve **formatting** and enable **syntax highlighting**
:::

## {{< iconify fa6-solid table >}} Tables: Structure Data

**Source Code:**
```markdown
| Tool | Purpose | Prosegrammer Use |
|------|---------|------------------|
| Git | Version control | Track document changes |
| Python | Programming | Automate documentation |
| Quarto | Publishing | Create professional docs |
| Markdown | Markup | Write readable content |
```

## {{< iconify fa6-solid table >}} Tables: Rendered Output

| Tool | Purpose | Prosegrammer Use |
|------|---------|------------------|
| Git | Version control | Track document changes |
| Python | Programming | Automate documentation |
| Quarto | Publishing | Create professional docs |
| Markdown | Markup | Write readable content |

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Tables organize **structured data** in documentation and reports
:::

## {{< iconify fa6-solid quote-left >}} Blockquotes: Emphasize Key Ideas

**Source Code:**
```markdown
> Document engineering is the art of creating clear, 
> maintainable, and professional documentation that 
> serves both human readers and automated systems.
>
> — A thoughtful prosegrammer
```

**Rendered Output:**
> Document engineering is the art of creating clear, 
> maintainable, and professional documentation that 
> serves both human readers and automated systems.
>
> — A thoughtful prosegrammer

## {{< iconify fa6-solid minus >}} Horizontal Rules: Visual Separation

**Source Code:**
```markdown
First section content here.

---

Second section content here.

***

Third section content here.
```

**Rendered Output:**

First section content here.

---

Second section content here.

***

Third section content here.

## {{< iconify fa6-solid square-root-alt >}} Mathematical Expressions

**Source Code:**
```markdown
**Inline Math:**
The complexity is $O(n^2)$ for this algorithm.

**Display Math:**
$$
\text{Document Quality} = \frac{\text{Clarity} \times \text{Accuracy}}{\text{Complexity}}
$$
```

**Rendered Output:**

**Inline Math:**
The complexity is $O(n^2)$ for this algorithm.

**Display Math:**
$$
\text{Document Quality} = \frac{\text{Clarity} \times \text{Accuracy}}{\text{Complexity}}
$$

## {{< iconify fa6-solid magic >}} Quarto: Enhanced Markdown

::: {.incremental}
- **Executable code blocks** with live output
- **Cross-references** for figures and tables  
- **Citations and bibliography** management
- **Multiple output formats** from single source
:::

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Quarto transforms Markdown into a **powerful publishing platform**
:::

## {{< iconify fa6-solid play >}} Executable Python Code

```{pyodide}
#| autorun: true
#| max-lines: 10
def document_stats(text: str) -> dict:
    """Calculate basic statistics for document engineering."""
    words = text.split()
    return {
        "word_count": len(words),
        "character_count": len(text),
        "avg_word_length": sum(len(word) for word in words) / len(words)
    }

sample_text = "Prosegrammers excel at document engineering"
stats = document_stats(sample_text)
print(f"Document statistics: {stats}")
```

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
Live code execution makes documentation **interactive** and **testable**
:::

## {{< iconify fa6-solid folder-tree >}} Document Engineering Workflow

::: {.incremental}
1. **Plan** document structure with headers
2. **Write** content using Markdown syntax
3. **Enhance** with Quarto features as needed
4. **Test** any embedded code examples
5. **Render** to desired output format
6. **Review** and iterate for clarity
:::

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
**Prosegrammers** follow systematic approaches to documentation
:::

## {{< iconify fa6-solid lightbulb >}} Best Practices for Prosegrammers

::: {.incremental}
- **Keep source readable** - others will read your Markdown
- **Use consistent formatting** - establish style guidelines  
- **Write descriptive alt text** - improve accessibility
- **Test code examples** - ensure they actually work
- **Link strategically** - connect related concepts
- **Version control everything** - track documentation changes
:::

## {{< iconify fa6-solid rocket >}} Ready to Practice!

::: {.incremental}
- Start with **simple README files** for your projects
- Practice **different Markdown features** daily
- Experiment with **Quarto capabilities** for reports
- Build your **prosegrammer toolkit** systematically
:::

::: {.fragment .fade .boxed-content style="font-size: 1.0em;"}
**Master these basics** and you'll excel at document engineering!
:::
